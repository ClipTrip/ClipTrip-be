name: CI/CD - Build, Push and Deploy

on:
  push:
    branches: [ main ]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 118497224929.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: clip-trip/server
      IMAGE_TAG: latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: make application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application.yml
        shell: bash

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run tests
        run: ./gradlew clean test

      - name: Build Spring Boot App
        run: ./gradlew bootJar

      - name: Copy jar for Docker
        run: cp build/libs/*.jar app.jar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        id: build-and-push-image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          IMAGE_BASE=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}
          IMAGE_SHA=${IMAGE_BASE}:${{ github.sha }}
          IMAGE_LATEST=${IMAGE_BASE}:latest
          docker build -t ${IMAGE_SHA} -t ${IMAGE_LATEST} .
          docker push ${IMAGE_SHA}
          docker push ${IMAGE_LATEST}
          echo "image_tag_sha=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 118497224929.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: clip-trip/server
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag_sha }}
      EC2_USER: ec2-user
      EC2_HOST: ${{ secrets.EC2_HOST }}
      SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@b4a07ca594
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            CONTAINER_NAME=clip-trip-server
            
            # 최신 이미지 풀
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
            docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${{ env.IMAGE_TAG }}

            # 기존 컨테이너가 존재하면 중지 및 삭제 (오류 무시)
            docker stop "$CONTAINER_NAME" || true
            docker rm "$CONTAINER_NAME" || true

            # 새로운 컨테이너 실행
            echo "Running new container $CONTAINER_NAME"
            docker run -d --name "$CONTAINER_NAME" -p 8080:8080 118497224929.dkr.ecr.ap-northeast-2.amazonaws.com/clip-trip/server:${{ env.IMAGE_TAG }}
