name: CI/CD - 도커 컴포즈를 이용한 빌드, 푸시, 배포

on:
  push:
    branches: [ main ]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 118497224929.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: clip-trip/server
      IMAGE_TAG: latest

    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: 자바 환경 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: application.yml 파일 생성
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD }}" > ./application.yml
        shell: bash

      - name: Gradle 캐싱
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 스프링 부트 앱 빌드
        run: ./gradlew clean bootJar -x test

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Amazon ECR 로그인
        uses: aws-actions/amazon-ecr-login@v2

      - name: 도커 이미지 빌드 및 푸시
        run: |
          IMAGE_URI=$(aws sts get-caller-identity --query "Account" --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]

    steps:
      - name: 소스코드 체크아웃
        uses: actions/checkout@v4

      - name: SSH를 통해 EC2에 배포
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -eux

            # ECR 환경 변수 설정
            export AWS_REGION="ap-northeast-2"
            export ECR_REGISTRY="118497224929.dkr.ecr.ap-northeast-2.amazonaws.com"
            export ECR_REPOSITORY="clip-trip/server"
            export IMAGE_TAG="latest"

            # ECR 로그인
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

            # docker-compose.yml 파일을 EC2에 직접 생성
            cat <<EOF > docker-compose.yml
            version: '3.8'
            services:
              app:
                image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                container_name: clip-trip-server
                ports:
                  - "8080:8080"
                depends_on:
                  - redis
                environment:
                  - SPRING_DATA_REDIS_HOST=redis
                  - SPRING_DATA_REDIS_PORT=6379
                restart: always
            EOF
            docker-compose pull app
            # 도커 컴포즈로 배포
            docker-compose up -d --force-recreate
