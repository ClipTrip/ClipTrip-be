name: CI/CD - Build, Push and Deploy

on:
  push:
    branches: [ main ]
concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 118497224929.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: clip-trip/server
      IMAGE_TAG: latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: make application-prod.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./application.yml
        shell: bash

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Spring Boot App
        run: ./gradlew clean bootJar -x test

      - name: Copy jar for Docker
        run: cp build/libs/*.jar app.jar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          IMAGE_URI=$(aws sts get-caller-identity --query "Account" --output text).dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]

    env:
      AWS_REGION: ap-northeast-2
      ECR_REGISTRY: 118497224929.dkr.ecr.ap-northeast-2.amazonaws.com
      ECR_REPOSITORY: clip-trip/server
      IMAGE_TAG: latest
      EC2_USER: ec2-user
      EC2_HOST: ${{ secrets.EC2_HOST }}
      SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -eux  # 디버그용(명령어 출력 및 오류 발생 시 즉시 중단)
            CONTAINER_NAME=clip-trip-server
            IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}

            echo "AWS_REGION=${AWS_REGION}"
            echo "ECR_REGISTRY=${ECR_REGISTRY}"
            echo "IMAGE_URI=${IMAGE_URI}"

            # AWS 로그인
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

            # 이미지 pull
            docker pull ${IMAGE_URI}

            # 기존 컨테이너 중지 및 삭제
            docker stop "$CONTAINER_NAME" || true
            docker rm "$CONTAINER_NAME" || true

            # 새 컨테이너 실행
            echo "Running new container $CONTAINER_NAME"
            docker run -d --name "$CONTAINER_NAME" -p 8080:8080 ${IMAGE_URI}
